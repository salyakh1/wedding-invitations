// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String            @id @default(cuid())
  email          String            @unique
  hashedPassword String
  firstName      String?
  lastName       String?
  phone          String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  invitationSites InvitationSite[]
  orders         Order[]

  @@map("users")
}

model Template {
  id          String            @id @default(cuid())
  name        String
  description String?
  previewUrl  String
  configJson  Json
  isPremium   Boolean           @default(false)
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  invitationSites InvitationSite[]

  @@map("templates")
}

model InvitationSite {
  id              String    @id @default(cuid())
  userId          String
  templateId      String
  title           String
  slug            String    @unique
  configJson      Json
  rsvpConfigJson  Json?
  status          SiteStatus @default(DRAFT)
  isPublished     Boolean   @default(false)
  publishedAt     DateTime?
  qrCodeUrl       String?   // URL для QR-кода
  qrCodeImage     String?   // Путь к изображению QR-кода
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  template        Template  @relation(fields: [templateId], references: [id])
  guests          Guest[]
  orders          Order[]

  @@map("invitation_sites")
}

model Guest {
  id              String      @id @default(cuid())
  invitationSiteId String
  name            String
  email           String?
  phone           String?
  rsvpStatus      RSVPStatus  @default(PENDING)
  mealPreference  String?
  tableNumber     Int?
  notes           String?
  respondedAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  invitationSite  InvitationSite @relation(fields: [invitationSiteId], references: [id], onDelete: Cascade)

  @@map("guests")
}

enum SiteStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum RSVPStatus {
  PENDING
  CONFIRMED
  DECLINED
  MAYBE
}

// Система заказов
model Order {
  id              String      @id @default(cuid())
  userId          String
  invitationSiteId String
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal     @db.Decimal(10, 2)
  currency        String      @default("RUB")
  paymentMethod   PaymentMethod?
  paymentStatus   PaymentStatus @default(PENDING)
  customerInfo    Json?       // Информация о заказчике
  deliveryInfo    Json?       // Информация о доставке
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  invitationSite  InvitationSite @relation(fields: [invitationSiteId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String    @id @default(cuid())
  orderId     String
  productType ProductType
  quantity    Int
  unitPrice   Decimal   @db.Decimal(10, 2)
  totalPrice  Decimal   @db.Decimal(10, 2)
  description String?
  createdAt   DateTime  @default(now())
  
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PRODUCTION
  READY
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CARD
  CASH
  BANK_TRANSFER
  ELECTRONIC
}

enum ProductType {
  INVITATION_PRINT
  INVITATION_DIGITAL
  BANQUET_CARDS
  THANK_YOU_CARDS
  ENVELOPES
  STAMPS
  DELIVERY
  PREMIUM_TEMPLATE
  SMS_SERVICE
  EMAIL_SERVICE
} 